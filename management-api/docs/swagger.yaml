basePath: /mgmt
definitions:
  model.APIContent:
    properties:
      description:
        type: string
      id:
        type: integer
    required:
    - id
    type: object
  model.APIInfo:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      source:
        type: string
      swagger_url:
        type: string
      thumbnail:
        type: string
    type: object
  model.APIInfoList:
    properties:
      api_info_list:
        items:
          $ref: '#/definitions/model.APIInfo'
        type: array
    type: object
  model.AccessToken:
    properties:
      key:
        type: string
      param_type:
        type: string
      value:
        type: string
    required:
    - key
    - param_type
    - value
    type: object
  model.EmptyResp:
    type: object
  model.PostAPIInfoReq:
    properties:
      description:
        type: string
      name:
        type: string
      source:
        type: string
      swagger_url:
        type: string
      thumbnail:
        type: string
    required:
    - description
    - name
    - source
    - swagger_url
    - thumbnail
    type: object
  model.PostAPIKeyReq:
    properties:
      user_account_id:
        type: string
    type: object
  model.PostAPIKeyResp:
    properties:
      access_key:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
      user_account_id:
        type: string
    type: object
  model.PostAPIRoutingReq:
    properties:
      api_key:
        type: string
      forward_url:
        type: string
      path:
        type: string
    required:
    - api_key
    - forward_url
    - path
    type: object
  model.PostAPITokenReq:
    properties:
      api_key:
        type: string
      path:
        type: string
      tokens:
        items:
          $ref: '#/definitions/model.AccessToken'
        type: array
    required:
    - api_key
    - path
    - tokens
    type: object
  model.PostContractReq:
    properties:
      product_name:
        type: string
      user_id:
        type: string
    required:
    - product_name
    - user_id
    type: object
  model.PostProductReq:
    properties:
      api_contents:
        items:
          $ref: '#/definitions/model.APIContent'
        type: array
      description:
        type: string
      display_name:
        type: string
      is_available:
        type: boolean
      name:
        type: string
      source:
        type: string
      thumbnail:
        type: string
    required:
    - description
    - name
    - source
    - thumbnail
    type: object
  model.PostUserReq:
    properties:
      account_id:
        type: string
      email_address:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - account_id
    - email_address
    - password
    type: object
  model.ResultSet:
    properties:
      count:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
    type: object
  model.SearchAPIInfoMetaData:
    properties:
      result_set:
        $ref: '#/definitions/model.ResultSet'
    type: object
  model.SearchAPIInfoResp:
    properties:
      api_info_list:
        items:
          $ref: '#/definitions/model.APIInfo'
        type: array
      metadata:
        $ref: '#/definitions/model.SearchAPIInfoMetaData'
    type: object
  validator.BadRequestResp:
    properties:
      message:
        type: string
      validation_errors:
        items:
          $ref: '#/definitions/validator.ValidationError'
        type: array
    type: object
  validator.ValidationError:
    properties:
      constraint_type:
        type: string
      enum:
        items:
          type: string
        type: array
      field:
        type: string
      got: {}
      gte:
        type: string
      lte:
        type: string
      message:
        type: string
      ne:
        type: string
    type: object
info:
  contact: {}
  description: This is an API that manages products.
  title: Management API
  version: "1.0"
paths:
  /api:
    get:
      description: Get list of APIs and its information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.APIInfoList'
      summary: Get list of API info.
    post:
      description: Get list of APIs and its information
      parameters:
      - description: api information
        in: body
        name: api_info
        required: true
        schema:
          $ref: '#/definitions/model.PostAPIInfoReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get list of API information
  /api/search:
    get:
      description: Get list of APIs and its information
      parameters:
      - description: 'search query words (split words by ''.'', ex: ''foo.bar'').
          If containing multiple words, items which match the all search words return'
        in: query
        name: q
        required: true
        type: string
      - default: all
        description: 'search target fields. You can choose field(s) from ''all'' (represents
          searching all fields), ''name'', ''description'', or ''source''. (if there
          are multiple target fields, split target by ''.'', ex: ''name.source'')'
        in: query
        name: target_fields
        type: string
      - default: partial
        description: pattern match, chosen from 'exact' or 'partial'
        enum:
        - exact
        - partial
        in: query
        name: pattern_match
        type: string
      - default: 50
        description: the maximum number of results
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: the starting point for the result set
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SearchAPIInfoResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: search for api info
  /api/token:
    delete:
      description: delete api tokens for calling external api
      parameters:
      - description: target api_key
        in: body
        name: api_key
        required: true
        schema:
          type: string
      - description: target api_key
        in: body
        name: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.EmptyResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: delete api tokens for call external api
    post:
      description: post api tokens for calling external api
      parameters:
      - description: api token description
        in: body
        name: tokens
        required: true
        schema:
          $ref: '#/definitions/model.PostAPITokenReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: post api tokens for call external api
  /contract:
    post:
      description: Post an API product
      parameters:
      - description: contract definition
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.PostContractReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Post a product
  /health:
    get:
      description: checks whether this API works correctly or not
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: checks if API works
  /keys:
    post:
      description: post api key used for authentication in apidoor gateway
      parameters:
      - description: api key owner
        in: body
        name: api_info
        required: true
        schema:
          $ref: '#/definitions/model.PostAPIKeyReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.PostAPIKeyResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: post api key
  /products:
    post:
      description: Post an API product
      parameters:
      - description: product definition
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.PostProductReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Post a product
  /routing:
    post:
      description: Post a new API routing
      parameters:
      - description: routing parameters
        in: body
        name: api_routing
        required: true
        schema:
          $ref: '#/definitions/model.PostAPIRoutingReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Post an API routing
  /users:
    post:
      description: Create a user
      parameters:
      - description: user description
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.PostUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/validator.BadRequestResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a user
swagger: "2.0"
